class PageWithStatus {
  public stateMachine: any = null;
  constructor() {
    this.stateMachine = new StateMachine({
        standby: {
          on: () => {},
          init: 'initializing',
          resume: 'connecting',
        },
        initializing: {
          on: async () => {
            await this.init();
            return 'connecting';
          },
          pause: 'standby'
        },
        connecting: {
          on: () => {
            return new Promise( async (resolve, reject) => {
              await this.onConnecting();
              const connected = true;
              resolve(connected ? 'connected' : 'offline');
            });
          },
          pause: 'standby'
        },
        connected: {
          on: async () => {
            try {
              // let data = await this.loadData();
              // this.onDidLoadData(data);
              // this.isOnline = true;
              this.onConnected();
              // this.offlineSource.next(false);
            } catch (e) {
              return 'offline';
            }
          },
          pause: () => {
            // this.onPause();
            return 'standby'
          },
          disconnect: 'disconnected',
        },
        disconnected: {
          on: async () => {
            // this.onDisconnected();
            return 'offline';
          }
        },
        offline: {
          on: async () => {
            // this.isOnline = false;
            // this.offlineSource.next(true);
          },
          pause: 'standby',
          resume: 'connecting',
          disconnect: 'offline'
        },
      });
  }

  init = () => {
    return new Promise((resolve, reject) => {
      console.log('executing init');
      setTimeout(() => resolve(), 1000);
    })
  }

  onConnecting = () => {
    return new Promise((resolve, reject) => {
      console.log('executing connecting');
      setTimeout(() => {
        console.log('inside connecting timeout');
        resolve()
      }, 2000);
    })
  }

  onConnected = () => {
    return new Promise((resolve, reject) => {
      console.log('executing connected');
      this.stateMachine.exec('resume');
      setTimeout(() => resolve(), 1000);
    })
  }
}


class StateMachine {
  public states: any = {};
  public running: boolean = false;
  public currentEvent: string = '';
  public identifier: string = '';
  public state: string = ''; // current state
  private queue: Array<any> = [];
  public env: any = {};
  public instanceId: any = 0;

  public onStateChanged$: any;

  public onStateChanged: any;

  constructor(states:any, identifier: string = '') {
    this.instanceId++;

    if( Object.keys(states).length <= 0 ) { throw "Error, no states provided" }
    this.states = states;
    this.state = 'standby';
    this.identifier = identifier;

    //Identifier for console logs if none specified
    this.setIdentifier(identifier);
  }

  setIdentifier(identifier: string) {
    if(identifier) {
      this.identifier = identifier
    } else {
      const no = Math.round(Math.random() * (1 - 1000) + 1);
      this.identifier = `SM${no}`;
      console.log(this.identifier, { color: "yellow", background: "blue" })
    }
  }

  public systemEvents = ['pause', 'resume'];
  isSystemEvent( ev ) {
    return this.systemEvents.includes( ev );
  }

  async exec(ev: string, context = {}, lastTry = false): Promise<void> {
    return new Promise(async (resolve, reject) => {
      let func = this.states[this.state][ev];
      if(this.isAlreadyRunning(ev)) {
        this.log(`skipped ${ev}, already running`);
        return false;
      } else if (!func) {
        this.log(`${ this.state } - ${ ev }: no function`);
        // --------------------------------------
        // if the state - event returns undefined
        // no function defined
        // --------------------------------------
        if(!lastTry) {
          this.log(`adding ${ ev } to QUEUE: no function`);
          if(!this.queue.some(e => e.event == ev)) {
            this.queue.push({ event: ev, context: context, isSystemEvent: this.isSystemEvent( ev ) });
          }
          this.log(`QUEUE: ${[ ...this.queue.map(e => e.event ) ]}`);
        } else {
          await this.exec('on', context);
          this.log(`ignored ${ev} (no func)`);
        }
        return false;
      } else if (this.running) {
        // --------------------------------------
        //If we are already running something else
        // --------------------------------------
        if(!lastTry || this.isSystemEvent( ev )) {
          this.log(`adding ${ ev } to QUEUE: already running`);
          if(!this.queue.some(e => e.event == ev)) {
            this.queue.push({
              event: ev,
              context: context,
              isSystemEvent: this.isSystemEvent(ev)
            });
            this.log(`QUEUE: ${[ ...this.queue.map(e => e.event )]}`);
          }
          this.log(`QUEUE: ${ this.queue.map(e => e.event) }`);
        } else {
          this.log(`ignored ${ev} (running)`);
        }
        return false;
      }

      this.onWillRun( ev );
      func = this.prepareFunction( func );
      const newState = await func( context );
      await this.onDidRun( newState, ev, context );

      resolve();
    });
  }

  onWillRun( ev ) {
    this.currentEvent = ev;
    this.running = true;
  }

  prepareFunction(event) {
    if(typeof event === 'string') {
      return () => event;
    } else {
      return event;
    }
  }

  async onDidRun(newState, ev, context) {
    this.log(`${this.state} executed ${ev}, -> ${ newState }`);

    let prevState = this.state;

    this.running = false;
    this.currentEvent = '';

    if(newState) {
      // transition
      if(newState != prevState) {
        this.state = newState;
        const interrupted = this.queue.some(event => event.isSystemEvent);
        this.log(`transitioned from ${ prevState } to ${ newState }, interrupted: ${ interrupted }`);
        this.log(`QUEUE: ${ [ ...this.queue.map(e => e.event) ] }`);
        if(interrupted) {
          this.queue = this.queue.filter(e => this.isSystemEvent( e.event ))
          return this.runFromQueue();
        } else {
          // activate new state
          await this.exec('on', context);
        }

      }
    }

    await this.runFromQueue();
  }

  isAlreadyRunning(event) {
    return this.running && event == this.currentEvent;
  }

  async runFromQueue() {
    if(this.queue.length > 0) {
      let q = this.queue.shift();
      this.log('- running from queue', q);
      const lastTry = true;
      await this.exec(q.event, q.context, lastTry);
    }
  }

  log(str, p = null) {
    if(p) {
      console.log(`${this.identifier} ${str}`, p);
    } else {
      console.log(`${this.identifier} ${str}`);
    }
  }
}


let pws = new PageWithStatus();

pws.stateMachine.exec('init');
// setTimeout(() => {
//   // pws.stateMachine.exec('pause');
//   // pws.stateMachine.exec('resume');
// }, 1500)